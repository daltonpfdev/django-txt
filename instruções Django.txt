Sempre que for iniciar um projeto em Django, criar uma pasta com o nome do projeto e criar o Ambiente Virtual com:
$ python -m venv venv

Para ativar o Ambiente Virtual, dar o comando:
$ .\venv\Scripts\activate

Para atualizar o pip:
$ pip install pip --upgrade
$ pip install setuptools wheel --upgrade

Para a instalação do Django, dar o comando:
$ pip install django

Instalar as bibliotecas necessárias para o projeto, como por exemplo:
$ pip install django
$ pip install requests
$ pip install numpy
...

Depois de instalado, gerar o arquivo requirements.txt que é o arquivo que lista as dependências do projeto, com o comando:
$ pip freeze > requirements.txt

Futuramente, quando ocorrer de baixar todas as dependências do arquivo requirements.txt, dar o comando:
$ pip install -r requirements.txt

Para iniciar um novo projeto em Django, dar o comando:
$ django-admin startproject "nome do projeto" .

Para testar o funcionamento do servidor Django em: http://127.0.0.1:8000/, dar o comando:
$ python manage.py runserver

Quando criado um projeto em Django, diversas variáveis de ambiente são geradas, e uma delas é a Secret Key, que é gerada automaticamente, e ela é fixa e é única por projeto em Django, então, por convenção é bom esconder ela em um arquivo chamado ".env" e não realizar o upload desse arquivo para o git com o arquivo ".gitignore". Siga o passo a passo para esconder essa Secret Key:

. Baixar a biblioteca dotenv:
$ pip install python-dotenv

. Em settings.py importar as bibliotecas:
$ from pathlib import Path, os
$ from dotenv import load_dotenv

. Logo abaixo das importações no arquivo settings.py, adicionar o código:
$ load_dotenv()

. Localizar a constante SECRET_KEK em settings.py e copiar a constante completa:
$ SECRET_KEY = 'django-insecure-d(6x0c7uzmfzp)kz^s(@x*sw--*2k4(lb=%8irq^uoy7onl6h*'

. Criar um arquivo chamado: ".env" na raiz do seu projeto

. No arquivo .env, copiar a constante e retire as '' do valor:
$ SECRET_KEY = django-insecure-d(6x0c7uzmfzp)kz^s(@x*sw--*2k4(lb=%8irq^uoy7onl6h*

. Na constante SECRET_KEY em settings.py, apagar o valor e substituir para:
$ SECRET_KEY = str(os.getenv('SECRET_KEY'))

. Após o procedimento, criar um arquivo chamado: ".gitignore" e pegar uma configuração para projetos Django. Certifique que no arquivo ".gitignore tem o nome: ".env""

Ainda dentro de settings.py, alterar os campos LANGUAGE_CODE para 'pt-br' e TIME_ZONE para 'America/Sao_Paulo'
$ LANGUAGE_CODE = 'pt-br'
$ TIME_ZONE = 'America/Sao_Paulo'

Em um projeto Django, uma página muito importante ja vem configurada e é possível utilizá-la, é a página de Admin do Django. Para ter acesso a ela, é necessário a criação de um super usuário no projeto.

. A criação de um super usuário em Django é possível com o comando:
$ python manage.py createsuperuser

. Coloque o nome de usuário, um email e uma senha forte.

. Acesse a página para realizar o teste de acesso: http://127.0.0.1:8000/admin

Com o acesso a página de admin do projeto, é necessário a criação do banco de dados já configurado para a página de Admin. Ela é apartir da ORM já pré-configurada no Django. Siga o passo a passo:

. Primeiramente, é necessário a criação das tabelas, chamadas em Django que migrations, dê o comando:
$ python manage.py makemigrations

. Depois das migrations criadas, dê o comando:
$ python manage.py migrate

. Pronto, todas as tabelas configuradas estão disponíveis na página de Admin

. Toda alteração no arquivo "models.py" deve se dar esses comandos novamente para a alteração nas tabelas do projeto.

Apartir desse ponto de configuração do projeto, é recomendado por diversos programadores subir o projeto no github. Então aqui vai o passo a passo de como subir o seu projeto django no github:

. Partimos do ponto onde o usuário já possui uma conta no github e um repositório criado onde irá receber o projeto

. No terminal dentro da raiz do projeto, realizar os comandos:
$ git init
$ git add .
$ git commit -m "Comentario Desejado"
$ git branch -M master
$ git remote add origin link-do-seu-repositorio.git
$ git push -u origin master

. Verificar no repositório se todos os arquivos estão subidos. Verificar também se os arquivos no ".gitignore" não estão no repositório.

. Pronto, agora qualquer implementação no projeto deve-se realizar esse processo novamente para registrar as implementações.

Para criar um novo App, dar o comando:
$ python manage.py startapp "nome do app"

Quando criado um novo app no projeto, adicionar o app em "settings.py", porém, é uma boa prática de programação que, ao invês de somente colocar o nome do app criado, colocar a configuração criada pelo próprio Django. Essa configuração está em no arquivo chamado de "app.py", arquivo esse que está dentro da pasta do app, siga o passo a passo:

. Localizar o arquivo "apps.py" dentro da pasta do seu app:

. Copiar o nome da classe de configuração criada para o app.
$ GaleriaConfig

. Nesse exemplo acima, o nome do app se chamava "galeria", porém, muda apartir do nome do app que você escolheu.

. No arquivo "settings.py", localizar a constante chamada: "INSTALLED_APPS", e adicionar mais uma linha:
$ nome-do-app.apps.classe-de-configuracao-do-app

. Exemplo da constante "INSTALLED_APPS" com o nome de app chamado de "galeria":
$ galeria.apps.GaleriaConfig

. Veja um exemplo da constante "INSTALLED_APPS" completa:
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'nome do app'
]

Dentro da raiz do projeto, criar uma pasta chamada: "templates" e dentro da pasta "templates", criar uma nova pasta com o nome do app:

. Estrutura das Pastas:
Projeto
App
templates
    "nome do App"
venv
manage.py
db.sqlite3

. No arquivo settings.py, alterar a variável TEMPLATES no campo 'DIRS' para:
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

. Essa pasta chamada de "templates" é a pasta onde seram guardados os arquivos .html do do app escolhido.

Para projetos grandes e quando o app estiver com bastantes páginas .html, é bom padronizar com criar um arquivo .html chamado: "base.html" onde estará todo html repidido no projeto. Em sites, muito html pode ser reutilizado, como por exemplo o footer e o navbar. Para fazer isso, faça os passos:

. No arquivo de "templates" na raiz do projeto, dentro da pasta do app, criar um arquivo chamado: "base.html".

. Nesse arquivo leva apenas (pode levar mais, mas o básico são essas) tags: <html>, <head> e <body>

. Dentro da tag <body>, incluir o código Django:
$ {% block content %}{% endblock %}

. Em um arquivo .html que irá utilizar esse código html, colocar o código:
$ {% extends 'nome-do-app/base.html' %}
$ {% block content %}
  codigo html da página
$ {% endblock %}

. Ainda dentro da pasta "templates" e dentro da pasta do app, criar uma pasta chamada: "partials"

. Dentro desse arquivo "partials" irá arquivos .html que levam funcionalidades repetidas do html do projeto.

. Os arquivos devem receber o nome da funcionalidade com um _ (underscore) no começo do nome do arquivo.html, como exemplo: "_footer.html" e "_navbar.html"

. Dentro do arquivo "base.html" importar o arquivo de "partials" que será utlizado, como exemplo:
$ {% include 'nome-do-app/partials/_navbar.html' %}
$ {% include 'nome-do-app/partials/_footer.html' %}

. Exemplo de um arquivo "base.html":
<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Alura Space</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{% static '/styles/style.css' %}">
</head>

<body>
    {% include 'galeria/partials/_navbar.html' %}
    {% block content %}{% endblock %}
    {% include 'galeria/partials/_footer.html' %}
</body>

. Exemplo de um arquivo "_footer.html" de partials:
<footer class="rodape">
    <div class="rodape__icones">
        <a href="https://twitter.com/AluraOnline" target=”_blank” >
            <img src="{% static '/assets/ícones/1x/twitter.png' %}" alt="ícone twitter">
        </a>
        <a href="https://www.instagram.com/aluraonline/" target=”_blank” >
            <img src="{% static '/assets/ícones/1x/instagram.png' %}" alt="ícone instagram">
        </a>
    </div>
    <p class="rodape__texto">Desenvolvido por Alura</p>
</footer>

. Aqui está as estruturas de pastas e arquivos da pasta "templates":
app
projeto
templates
  "nome-do-app"
    base.html
    index.html
    partials
      _footer.html
      _navbar.html
venv
.env
.gitignore
db.sqlite3
manage.py
requirements.txt

Para criar uma rota no seu app no projeto Django, é necessário a alteração em dois arquivos: "views.py" e "urls.py". Sendo que o arquivo "urls.py" está na pasta do projeto e o arquivo "views.py" está na pasta do app. Porém, como padronização e organização de código do projeto Django, é necessário criar um arquivo "urls.py" na pasta do app. Faça o passo a passo para criar um rota para a home page do app:

. Estou considerando que já possui uma página "index.html" na pasta de "templates" e na pasta do app escolhido.

. Criar um arquivo chamado: "urls.py" no app escolhido

. No arquivo "views.py" do seu app, implementar uma função com um nome autoexplicativo:
$ def index(request):
$   return render(request, 'nome-do-app/index.html')

. Dentro do arquivo "urls.py" do projeto, importar o método "include" de "django.urls":
$ from django.urls import path, include

. No arquivo "urls.py" do projeto, implementar em urlpatterns o caminho do arquivo "urls.py" do app:
$ path('', include('nome-do-app.urls'))

. No arquivo "urls.py" do app, importar o método "index" do módulo "views.py" do app:
$ from nome-do-app.views import index

. Importar também o método "path" de "django.views" em "urls.py" do app:
$ from django.urls import path

. Implementar a constante "urlpartterns" e adicionar uma rota com o método "path":
$ urlpatterns = [
$   path('', index, name='index')
$ ]

. Nessa configuração, ao acessar o servidor: http://127.0.0.1:8000/, irá entrar na página "index.html" criada em "templates"






